{*----------------------------------------------------------------------------
 * Copyright January 2022
 * Name: Elements
 * Author: Tom Disque
 * Purpose: To exercise some of the features of Delphi
 *
 * Notes: I retired in 2019 after 42 years of code development, but found that
 *        I was restless after some months.  I decided I'd like to go back to
 *        coding for a few more years, but realized that my skills were too
 *        out of date.  I needed to learn C#, C++, Java, Python, Perl, and the
 *        parts of the full stack that I didn't already know.
 *
 *        I started with C#, using the excellent book "Learn C# in one Day"
 *        by Jamie Chan.  I knew from past experience with classes in Java
 *        that if I didn't start coding in C# right away, I would forget what
 *        I had learned, so I decided on this project.
 *
 *        Since my bachelor in science degree was a double major in chemistry
 *        and computer science, I wanted a project that would involve both
 *        disciplines.  I also wanted To exercise some of the features unique
 *        to other languages as opposed to C.  This code is the result of that
 *        effort.
 *
 *        The basic idea is the the player choose two elements to see if they
 *        will combine with one another; for example, hydrogen combines with
 *        oxygen to create water.  With later iterations, I will make it more
 *        complicated, such as requiring the player to provide two hydrogen
 *        atoms, one oxygen atom, and a spark of energy to cause the reaction
 *        to take place.
 *
 *        Eventually, if all goes well, I can envision a sequel: Compounds,
 *        which would deal with reactions beyond simple elements, such as
 *        mixing sodium bicarbonate with vinegar to create sodium acetate,
 *        carbon dioxide, and water.
 *
 *        It is my hope that high school students of chemistry and computer
 *        science will  use this code as a starting point to create more
 *        fun ways to learn.  Thus, I give my permission to any and all to
 *        copy and modify this code in any way you wish.  I would love to
 *        see a version of it using the the Unity or Unreal engines.
 *
 *        Converted to Delphi August 2022
 ---------------------------------------------------------------------------*)
}

unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls,
  IdStrings, Vcl.ToolWin, Vcl.ComCtrls;

type
  TElements = class(TForm)

  ElementNames: TListBox;
  Label1: TLabel;
    ElementSelected: TRadioGroup;
    Combine: TButton;
    ElementSymbols: TComboBox;
    Instructions: TMemo;
    Exit: TButton;
    StatusBar1: TStatusBar;
    ToolBar1: TToolBar;
    Results: TMemo;

    procedure FormCreate(Sender: TObject);
    procedure ElementNamesClick(Sender: TObject);
    procedure ExitClick(Sender: TObject);
    procedure ElementSymbolsClick(Sender: TObject);
    procedure CombineClick(Sender: TObject);
  private
    { Private declarations }
  public

// No element has more than 10 oxidation states
Const MAX_OXIDATION_STATES:integer = 10;
      TOTAL_ELEMENTS:integer = 118;
      PeriodicTable:TFilename =
        'C:\Users\Public\Documents\periodic.csv';
  end;

{ Why do I get 'undefined' error messages when I use those first 2 constants
  in an array declaration?
  }

type Oxidation = array[0..9] of integer;
type arrayPtr  = array[0..117] of string;

var
  Elements: TElements;
  Number:   array[0..117] of integer;        // Atomic number
  Mass:     array[0..117] of double;         // Atomic number
  OxyVals:  array[0..9, 0..117] of integer; // Oxidation states

  { The selection numbers are always an index to the names, even
    when the selection is made from the combobox.
  }
  ElementSelection:array[0..1] of integer;

  { AlphaSymSeq is sequence numbers that correspond to the alphabetical
    sequence of the element symbols. These help us access the name when we
    only have the symbol.  To get from the symbol to the atomic number we
    have to find the name first, because the atomic numbers were along for
    the ride when the names were sorted.
  }
  AlphaSymSeq:array[0..117] of Integer = (
1  , 97 , 2  , 3  , 5  , 6  , 7  , 40 , 13 , 8  , 10 , 12 , 11 , 9  , 14 , 18 ,
16 , 15 , 19 , 17 , 21 , 26 , 24 , 23 , 22 , 20 , 25 , 28 , 27 , 29 , 31 , 30 ,
32 , 35 , 49 , 34 , 33 , 36 , 38 , 37 , 39 , 45 , 43 , 41 , 61 , 44 , 42 , 47 ,
46 , 48 , 80 , 50 , 51 , 54 , 52 , 56 , 55 , 63 , 60 , 57 , 58 , 62 , 59 , 70 ,
98 , 69 , 64 , 65 , 68 , 67 , 71 , 66 , 74 , 72 , 73 , 76 , 83 , 53 , 75 , 82 ,
79 , 81 , 77 , 78 , 84 , 89 , 86 , 91 , 88 , 87 , 85 , 90 , 100, 4  , 93 , 95 ,
94 , 96 , 92 , 109, 99 , 101, 105, 102, 103, 107, 110, 106, 108, 104, 112, 113,
111, 114, 116, 115, 117, 118 );

  { AlphaNameSeq is sequence numbers that correspond to the alphabetical
    sequence of the element names. These help us access the symbol when we
    only have the name.
  }

  AlphaNameSeq:array[0..117] of Integer = (
1  , 3  , 4  , 94 , 5  , 6  , 7  , 10 , 14 , 11 , 13 , 12 , 9  , 15 , 18 , 17 ,
20 , 16 , 19 , 26 , 21 , 25 , 24 , 23 , 27 , 22 , 29 , 28 , 30 , 32 , 31 , 33 ,
37 , 36 , 34 , 38 , 40 , 39 , 41 , 8  , 44 , 47 , 43 , 46 , 42 , 49 , 48 , 50 ,
35 , 52 , 53 , 55 , 78 , 54 , 57 , 56 , 60 , 61 , 63 , 59 , 45 , 62 , 58 , 67 ,
68 , 72 , 70 , 69 , 66 , 64 , 71 , 74 , 75 , 73 , 79 , 76 , 83 , 84 , 81 , 51 ,
82 , 80 , 77 , 85 , 91 , 87 , 90 , 89 , 86 , 92 , 88 , 99 , 95 , 97 , 96 , 98 ,
2  , 65 , 101, 93 , 102, 104, 105, 110, 103, 108, 106, 109, 100, 107, 113, 111,
112, 114, 116, 115, 117, 118 );

  { I chose to use arrays of indices to connect names with symbols instead
    of pointers because it was very easy to create the arrays.  Here's how:
    1. Download a periodic table to a spreadsheet; it will be sorted by
       atomic number.
    2. Copy the column of atomic numbers (1 to 118) to a safe place.
    3. Sort the table by name and paste the copied column at the end.
    4. Sort the table by symbol. The AlphaSymSeq array is now the column
       pasted from step 3.
    5. Paste the column from the copy buffer at the end again.
    6. Sort the table by name again.  The AlphaNameSeq array is now the
       column pasted from step 5.
  }

  columns:  TstringList;

implementation

{$R *.dfm}

procedure TElements.FormCreate(Sender: TObject);
begin
  var wholeRow:string;
  var csvFile:TextFile;
  var i, j:integer;

  AssignFile(csvFile, PeriodicTable);
  reset(csvFile);
  columns := TStringList.Create;

  i := 0;
  while (not eof(csvFile)) do begin
    // Read a whole row
    readln(csvFile, wholeRow);

    // Separate the row into its constituent columns:
    // Atomic number, Symbol, Name, Atomic Weight, and ten oxidation
    // states, from most negative to most positive.
    ExtractStrings([','], [], PChar(wholeRow), columns);

    Number[i] := columns.Strings[0].ToInteger;

    // Symbols and Names are already set in the Listbox and combobox
    // ElementSymbols.Items[i] := columns.Strings[1];
    // ElementNames.Items[i]   := columns.Strings[2];

    Mass[i] := columns.Strings[3].ToDouble;

    for j := 4 to 13 do begin
      OxyVals[j-4, i] := columns.Strings[j].ToInteger;
      end;

    i := i + 1;
    columns.Clear;
    end;

    Results.Lines.Clear;
    Results.Lines.Strings[0] := 'Results';

    for i  := 1 to 10 do
      Results.Lines.Add(' ');

  columns.Free;
  closefile(csvFile);

  end;

procedure TElements.ElementNamesClick(Sender: TObject);
begin
  var i:integer := ElementSelected.ItemIndex; // -1, 0, or 1
  var j:integer := ElementNames.ItemIndex;

  // If j = -1, someone clicked in dead space
  if (j > -1) then

    case i of

      // Index = -1 if we clicked on the listbox without first selecting the radiobox
      -1: ShowMessage('First, select element 1 or element 2');

       // Save the selected element name and index
       0..1: begin
          ElementSelection[i] := j;
          ElementSelected.items[i] := ElementNames.Items.Strings[j];
          end;

       else ShowMessage('Unknown element button'); // Should never happenn
       end;
  end;

procedure TElements.ElementSymbolsClick(Sender: TObject);
begin
  var i:integer := ElementSelected.ItemIndex; // -1, 0, or 1
  var j:integer := AlphaSymSeq[ElementSymbols.ItemIndex] - 1;

  // j now points to the name corresponding to the selected symbol
  // If j = -1, someone clicked in dead space
  if (j > -1) then

    case i of

      // Index = -1 if we clicked on the listbox without first selecting the radiobox
      -1: ShowMessage('First, select element 1 or element 2');

       // Save the selected element name and index
       0..1: begin
          ElementSelection[i] := j;
          ElementSelected.items[i] := ElementNames.Items.Strings[j];
          end;

       else ShowMessage('Unknown element button'); // Should never happenn
     end;

end;

// Exit button.  Time to quit!
procedure TElements.ExitClick(Sender: TObject);
begin
  Application.Terminate;
end;

// Combine button.  Time to the elements together.
procedure TElements.CombineClick(Sender: TObject);
begin
  var name1:string :=
{ Here's where we use the oxidation states to determine how the elements
  will combine.  We use a least common multiple function to do this.
}
  Results.Lines.Strings[1] := 'We are combining ' +
    ElementNames.Items.Strings[ElementSelection[0]] +
    ' with ' +
    ElementNames.Items.Strings[ElementSelection[1]];

  Results.Lines.Strings[2] := '(Element ' + ElementSelection[0].ToString +
     ' with ' + ElementSelection[1].ToString + ')';

  Results.Lines.Strings[3] := 'We are combining ' +
    ElementSymbols.Items.Strings[AlphaNameSeq[ElementSelection[0]] - 1] +
    ' with ' +
    ElementSymbols.Items.Strings[AlphaNameSeq[ElementSelection[1]] - 1];

  Results.Lines.Strings[4] := '(Element ' +
    AlphaNameSeq[ElementSelection[0]].ToString +
    ' with ' + AlphaNameSeq[ElementSelection[1]].ToString + ')';



end;

// I found this least common multiple example at rosettacode.org
function lcm(a, b: longint): longint;
begin
  result := a;
  while (result mod b) <> 0 do
    inc(result, a);
end;

end.
